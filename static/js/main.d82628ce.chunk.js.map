{"version":3,"sources":["Sidebar.js","Main.js","App.js","index.js"],"names":["Sidebar","notes","addNote","deleteNote","activeNote","setActiveNote","sorts","sort","a","b","lastModified","className","type","onClick","map","note","id","title","body","substr","Date","toLocaleDateString","Main","getActiveNote","updateNote","changeNote","key","value","now","autoFocus","onChange","e","target","rows","cols","placeholder","App","useState","localStorage","JSON","parse","setNote","useEffect","setItem","stringify","newNote","uuid","filterNote","filter","data","find","console","log","updateArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d82628ce.chunk.js","sourcesContent":["export default function Sidebar({notes,addNote,deleteNote,activeNote,setActiveNote}){\n    const sorts =  notes.sort((a,b) => b.lastModified - a.lastModified)\n    return (\n        <div className=\"app-sidebar\">\n        <div className=\"app-sidebar-header\">\n            <h1>Notes</h1>\n            <button type=\"button\" onClick={addNote}>Add</button>\n        </div>\n        <div className=\"app-sidebar-notes\">\n            {sorts.map((note) => {\n                return (\n                    <div key={note.id} className={`app-sidebar-note ${note.id === activeNote && \"active\"}`}  onClick={() => setActiveNote(note.id)}>\n                        <div className=\"sidebar-note-title\">\n                            <h4>{note.title}</h4>\n                            <button type=\"button\" onClick={() => deleteNote(note.id)}>Delete</button>\n                        </div>\n                        <p>{note.body.substr(0,20) + '...'}</p>\n                        <small className=\"note-meta\">\n                            last-modified : { new Date(note.lastModified).toLocaleDateString('en-us')}\n                        </small>\n                    </div>\n                )\n              \n            })}\n            \n        </div>\n         \n    </div>\n    )\n}","import ReactMarkdown from 'react-markdown'\nexport default function Main({getActiveNote,updateNote}){\n    const changeNote = (key,value) => {\n        \n        updateNote({\n          ...getActiveNote,\n          [key] : value,\n          lastModified: Date.now()\n        })\n    }\n\n    if (!getActiveNote) return <div className=\"no-active-note\">No Active Note</div>;\n    return(\n     <div className=\"app-main\">\n         <div className=\"app-main-note-edit\">\n             <input type=\"text\"  autoFocus value={getActiveNote.title} onChange={(e) => changeNote('title',e.target.value)} />\n             <textarea rows=\"\" cols=\"\" placeholder=\"write your note here\" value={getActiveNote.body} onChange={(e) => changeNote('body',e.target.value)}></textarea>\n         </div>\n\n         <div className=\"app-main-note-preview\">\n             <h3 className=\"preview-title\">{getActiveNote.title}</h3>\n             <ReactMarkdown className=\"markdown-preview\">\n             {getActiveNote.body}\n             </ReactMarkdown>\n         </div>\n     </div>\n    )\n}\n//   if(note.id == activeNote){\n//     setNote([updateNote,...notes])\n//   }","import {useState,useEffect} from 'react'\nimport Sidebar from './Sidebar'\nimport Main from './Main'\nimport uuid from 'react-uuid'\nimport './App.css';\n\nfunction App() {\n  const [notes,setNote] = useState( localStorage.notes ? JSON.parse(localStorage.notes) : []);\n  const [activeNote,setActiveNote] = useState(false) \n\n  useEffect(() => {\n    localStorage.setItem('notes',JSON.stringify(notes))\n  },[notes])\n\n  const addNote = () => {\n    const newNote = {\n      id:uuid(),\n      title:'Untitled',\n      body:'fasdfasfasfasfasfasfasf',\n      lastModified:Date.now()\n    }\n    setNote([newNote,...notes])\n  }\n\n  const updateNote = (updateNote) => {\n    console.log(updateNote);\n     const updateArray =  notes.map((note) => {\n        if(note.id == activeNote){\n         return updateNote;\n        }\n        return note;\n      })\n      setNote(updateArray)\n  }\n\n  const deleteNote = (id) => {\n   const filterNote =  notes.filter((note) => note.id !== id);\n    setNote(filterNote)\n  }\n\n  const getActiveNote = () => {\n    //   if(note.id == activeNote){\n    //     setNote([updateNote,...notes])\n    //   }\n    const data = notes.find((note) => note.id == activeNote);\n    console.log(data);\n    return data;\n  }\n\n  return (\n    <div className=\"App\">\n      <Sidebar notes={notes} addNote={addNote} deleteNote={deleteNote} activeNote={activeNote} setActiveNote={setActiveNote}/>\n      <Main  getActiveNote={getActiveNote()} updateNote={updateNote}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}